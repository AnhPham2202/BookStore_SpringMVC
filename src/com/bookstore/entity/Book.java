package com.bookstore.entity;
// Generated Dec 17, 2021, 11:20:09 AM by Hibernate Tools 4.3.5.Final

import javax.persistence.Transient;

import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Formula;

/**
 * Book generated by hbm2java
 */

@Entity
@Table(name = "book", catalog = "bookstoredb", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@NamedQueries({
	@NamedQuery(name = "getAllBooks", query = "SELECT b FROM Book b ORDER BY b.title"),
	@NamedQuery(name = "getBooksByCategory", query = "SELECT b FROM Book b INNER JOIN b.category c "
			+ "ON b.category.categoryId = c.categoryId " 
			+ "WHERE b.category.categoryId = :categoryId" ),
	@NamedQuery(name = "searchBook", query = "SELECT b FROM Book b WHERE b.title LIKE CONCAT('%', :keyword, '%') "),
	@NamedQuery(name = "listBooksOrderByPublishDate", query = "SELECT b FROM Book b ORDER BY b.publishDate DESC"),
	@NamedQuery(name = "listTop5BestSellerBooks", query = "SELECT b FROM Book b "
			+ "LEFT JOIN b.orderDetails o "
			+ "GROUP BY b.bookId "
			+ "ORDER BY o.size DESC"),
	@NamedQuery(name = "listTopFavoredBooks", query = "SELECT b FROM Book b "
			+ "LEFT JOIN b.reviews r "
			+ "GROUP BY b "
			+ "ORDER BY (SUM(r.rating) / r.size)"
			)	
})
public class Book implements java.io.Serializable {

	private Integer bookId;
	private Category category;
	private String title;
	private String author;
	private String description;
	private String isbn;
	private byte[] image;
	private String base64Img;
	private float price;
	private Date publishDate;
	private Date lastUpdateTime;
	private Set<Review> reviews = new HashSet<Review>(0);
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);
	
	@Formula("SELECT (SUM() / r.size) FROM Book b LEFT JOIN b.reviews r ")
	private float rating;

	public Book() {
	}

	public Book(Category category, String title, String author, String description, String isbn, byte[] image,
			float price, Date publishDate, Date lastUpdateTime) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Book(Category category, String title, String author, String description, String isbn, byte[] image,
			float price, Date publishDate, Date lastUpdateTime, Set<Review> reviews, Set<OrderDetail> orderDetails) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
		this.reviews = reviews;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "book_id", unique = true, nullable = false)
	public Integer getBookId() {
		return this.bookId;
	}

	public void setBookId(Integer bookId) {
		this.bookId = bookId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "title", unique = true, nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "author", nullable = false, length = 64)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "isbn", nullable = false, length = 15)
	public String getIsbn() {
		return this.isbn;
	}

	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	@Column(name = "image", nullable = false)
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "price", nullable = false, precision = 12, scale = 0)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "publish_date", nullable = false, length = 10)
	public Date getPublishDate() {
		return this.publishDate;
	}

	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "book")
	public Set<Review> getReviews() {
		return this.reviews;
	}

	public void setReviews(Set<Review> reviews) {
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "book", cascade = CascadeType.ALL)
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}
	
	
	@Transient
	public String getBase64Img() {
		this.base64Img = Base64.getEncoder().encodeToString(image);
		return base64Img;
	}
	
	@Transient
	public void setBase64Img(String base64Img) {
		this.base64Img = base64Img;
	}
	
	@Transient
	public float getRating() {
		float rating = 0.0f;
		int ratingNumber = reviews.size();
		
		for(Review review : reviews) {
			rating += review.getRating();
		}
		
		return rating/ratingNumber;
	}
	
	@Transient
	public List<String> getRatingStars() {
		return getRatingString(getRating());
	}
	
	public List<String> getRatingString(float rating) {
		int integerPart = (int) rating;
		float decimalPart = (float) rating - integerPart;
		int starNumber = 5;
		ArrayList<String> list = new ArrayList<>();

		for(int i=1; i<=integerPart; i++) {
			list.add("yes");
		}
			
		for (int i=1; i<=starNumber - integerPart; i++) {
			list.add("no");
		}
		
		if (decimalPart == 1f) {
			list.set(list.size() - 1, "yes");
		} else if (decimalPart > 0.5f){
			list.set(list.indexOf("no"), "half");
		}
		
		return list;
	}

	@Override
	public int hashCode() {
		return this.bookId;
	}

	@Override
	public boolean equals(Object obj) {
		if (this.bookId.equals(((Book) obj).getBookId())) {
			return true;
		}
		return false;
	}
}
